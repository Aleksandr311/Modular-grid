//Есть восемь основных типов данных в JavaScript:

//Строка - string
//Число - number (ограничено)
//bigint для целых чисел произвольной длины(не ограничено)
//Булевый (логический) тип - boolean для true/false
//Объекты - object
//Символ - symbol
//Значение null - 
//Значение undefined - 

//Строка - string Должна быть заключена в кавычки (двойные или одинарные или обратные)
let message = "Hello";
let str2 = 'Одинарные кавычки тоже подойдут';
let phrase = `Обратные кавычки позволяют встраивать переменные  ${str2}`;
 //Пример из учебника, Нужно пояснение или нет?
//Итого три типа кавычек: "", '', ``.
//Первые два не отличаются в js, но есть нюансы или нет

//Обратные кавычки:
//Расширенная функциональность позволяет встраивать встраивать выражения в строку
// заключая их в ${...}

let girl = 'Ann'
let boy = "Ben"
alert(`Мальчик по имени ${boy} Говорит "Hello", девочка ${girl} отвечает 'Hi', 
а сколько времени интересуется ${boy}? "Звезды говорят ${7+17-34*2+63}"
 ответила ${girl} и нырнула в лужу`);
//Думаю что удобно для часто повторяемых фраз, выражений и для переноса строк итд

//Число - number (ограничено(2**53-1) (т. е. 9007199254740991), или меньше,
// чем -(2**53-1) для отрицательных чисел)
let number = 123;
console.log(number);
number = 12.345*8;
console.log(number);//Возвращает number построчно
//числа можно округлять
//Infinity, -Infinity и NaN

//Infinity представляет собой математическую бесконечность ∞. 
//Это особое значение, которое больше любого числа.
//Мы можем получить его в результате деления на ноль:
console.log( 1 / 0 ); // Infinity
//Или задать его явно:
console.log( Infinity ); // Infinity
var a = 3,
    b = Infinity;
console.log(a - a); // 0.
console.log(b - b); // NaN
console.log(Infinity > Infinity);//false
console.log(Infinity > 10**309);//false
//"что угодно, помноженное на Infinity дает Infinity". Не совсем.
//если умножить Infinity на 0 будет NaN:
console.log(Infinity * 0);//NaN
//"и что угодно, деленное на Infinity дает 0." Тоже не всегда:
console.log(Infinity / Infinity);//NaN
//Также Infinity,не равно бесконечности,
//а равно примерно 10**309:
console.log(Infinity == 10**309);//true

//NaN  вычислительная ошибка. 
//Это результат неправильной или неопределённой математической операции, например:
console.log( "Строка" / 2 ); // NaN, такое деление является ошибкой
console.log("22" / 2);//11 Строка 22 преобразуется в число
//Значение NaN «прилипчиво».
//Если где-то в математическом выражении есть NaN, 
//то результатом вычислений с его участием будет NaN
console.log( "не число" / 2 + 5 ); // NaN
//*Математические операции – в JavaScript «безопасны». Мы можем делать что угодно: 
//делить на ноль, обращаться с нечисловыми строками как с числами и т.д.
//Скрипт никогда не остановится с фатальной ошибкой (не «умрёт»).
// В худшем случае мы получим NaN как результат выполнения.

//bigint для целых чисел произвольной длины(не ограничено)
console.log(Infinity*BigInt);//NaN
//Тип BigInt был добавлен в JavaScript, чтобы дать возможность работать с целыми числами
//произвольной длины. Чтобы создать значение типа BigInt, необходимо добавить n в конец 
//числового литерала:
const bigInt = 1234567890123456789012345678901234567890n;//"n" в конце означает - BigInt
//Так как BigInt-числа нужны достаточно редко, мы рассмотрим их в отдельной главе BigInt.

//Булевый (логический) тип - boolean для true/false
//может принимать только два значения: true (истина) и false (ложь)
//Булевые значения также могут быть результатом сравнений:
let compare = 4 > 1;
console.log(compare);//true
let compare1 = 4 < 1;
console.log(compare1);//false
//*Более сложные сравнения через if else?????

//Объекты - object (особенный тип данный)
let obj = {};
console.log(typeof obj);
//Все остальные типы называются «примитивными», потому что их значениями могут быть
//только простые значения (будь то строка, или число, или что-то ещё). 
//В объектах же хранят коллекции данных или более сложные структуры.
//Объекты занимают важное место в языке и требуют особого внимания. 
//Мы разберёмся с ними в главе Объекты после того, как узнаем больше о примитивах.

//Тип symbol (символ) используется для создания уникальных идентификаторов в объектах. 
//Мы упоминаем здесь о нём для полноты картины, изучим этот тип после объектов

//Null - 'ничего', "пусто", "значение неизвестно"
//Значение «null» Специальное значение null не относится ни к одному из типов.
//Оно формирует отдельный тип, который содержит только значение null:
let age = null;
//В JavaScript null не является «ссылкой на несуществующий объект» или 
//«нулевым указателем», как в некоторых других языках.
//В приведённом выше коде указано, что значение переменной age неизвестно.

//undefined - переменной не присвоено значение
let length; 
alert(length);//Выведет значение undefined
console.log(length);
//мы можем присвоить значение undefined любой переменной
let cat = "Murka";
console.log(cat);//Murka
cat = undefined;
console.log(cat);//undefined
//Но так делать не рекомендуется. Обычно null используется для присвоения переменной
//«пустого» или «неизвестного» значения, а undefined – для проверок, была ли переменная
//назначена



//ЗАДАЧА: сначала решаю сам потом смотрю ответ
let name = "Ilya";
alert( `hello ${1}` ); // hello 1?
alert( `hello ${"name"}` );// hello name ?
alert( `hello ${name}` ); // hello Ilya ? ОТВЕТ: все верно
console.log( `hello ${1}` ); // hello 1?
console.log( `hello ${"name"}` );// hello name ?
console.log( `hello ${name}` ); // hello Ilya ? ОТВЕТ: все верно

